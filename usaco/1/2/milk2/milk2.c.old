/*
  ID: use.c.only
  LANG: C
  TASK: milk2
*/

#include<stdio.h>
#define MAX_N 5000
FILE * fin, * fout;
long long N, heap_size, start[MAX_N], end[MAX_N];

#define SWAP(a,b)				\
  {						\
    tmp = start[a];				\
    start[a] = start[b];			\
    start[b] = tmp;				\
    tmp      = end  [a];			\
    end  [a] = end  [b];			\
    end  [b] = tmp;				\
  }

#define SIFT_DOWN						\
  while (node < heap_size) {					\
    left = 2 * node + 1;					\
    right = 2 * node + 2;					\
    largest = node;						\
    if (left < heap_size && start[largest] < start[left])	\
      largest = left;						\
    if (right < heap_size && start[largest] < start[right])	\
      largest = right;						\
    if (largest == node) break;					\
    SWAP(largest,node);						\
    node = largest;						\
  }


int main() {
  long long i,
    tmp, left, right, parent, node, largest, ibegin, iend, milked, idle;
  printf("beginning ---\n");
  fin  = fopen("milk2.in" ,"r");
  fout = fopen("milk2.out","w");

  fscanf(fin, "%lld", &N);

  for (i = 0; i < N; i++)
    fscanf(fin, "%lld%lld", &start[i], &end[i]);


  printf("after input\n");
  /* sort intervals by starting time */

  /* using heapsort */

  /* build the heap */
  heap_size = N;
  for (i = (N-2)/2; i >= 0; i--) {
    node = i;
    SIFT_DOWN;
  }

  printf("after heap built\n");
  /* pop elements one by one */
  for (i = N-1; i > 0; i--) {
    SWAP(0,i);
    heap_size--;
    node = 0;
    SIFT_DOWN;
  }

  printf("after sorting\n");

  /* now iterate over the intervals 
   * and merge relevant intervals */
  milked = 0; idle = 0;
  ibegin = 0; iend = 0;
  for (i = 0; i < N; i++) {
    printf("interval merging iteration %d\n", i);
    if (iend >= start[i])
      iend = (end[i] > iend) ? end[i] : iend;

    else {
      idle = (start[i]-iend > idle && i > 0) ? start[i]-iend : idle;
      ibegin = start[i];
      iend   = end  [i];
    }

    milked = (iend-ibegin> milked) ? iend-ibegin : milked;
  }

  fprintf(fout, "%lld %lld\n", milked, idle);

  fclose(fin);
  fclose(fout);
  return 0;
}
